{"version":3,"sources":["constants.ts","components/LoginPage.tsx","components/Home.tsx","App.tsx","common/appConfig.ts","index.tsx"],"names":["LiffStatus","LoginPage","exact","path","liff","isLoggedIn","onClick","login","redirectUri","process","Home","history","useHistory","logout","push","style","marginTop","getOS","getLanguage","getVersion","getLineVersion","App","useState","Initializing","liffState","setLiffState","useEffect","init","liffId","then","Success","console","log","err","Failed","className","to","ReactDOM","render","document","getElementById"],"mappings":"8JAAYA,E,iFAAAA,K,kBAAAA,E,gBAAAA,E,6BAAAA,M,KCQG,SAASC,IAStB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,UACfC,IAAKC,aACJ,8CAEA,6CAEE,6BACE,4BAAQC,QAlBF,WAClB,IAAKF,IAAKC,aACR,OACID,IAAKG,MAAM,CAAEC,YAAaC,kCAepB,kBCvBD,SAASC,IACtB,IAAMC,EAAUC,cAEhB,OACE,oCACE,yCACA,6BACE,4BACEN,QAAS,WACPF,IAAKS,SACLF,EAAQG,KAAK,YAHjB,WASF,yBAAKC,MAAO,CAAEC,UAAW,SACvB,oCAAUZ,IAAKa,SACf,0CAAgBb,IAAKc,eACrB,6CAAmBd,IAAKe,cACxB,qDAEIf,IAAKgB,iBACDhB,IAAKgB,iBACL,2BCuBDC,MAtCf,WAAgB,IAAD,EACqBC,mBAChCtB,EAAWuB,cAFA,mBACNC,EADM,KACKC,EADL,KAiBb,OAZAC,qBAAU,WACR,IACEtB,IAAKuB,KAAK,CAAEC,OCpBK,wBDoBcC,MAAK,WAClCJ,EAAazB,EAAW8B,YAE1BC,QAAQC,IAAI,qBACZ,MAAOC,GACPF,QAAQC,IAAIC,GACZR,EAAazB,EAAWkC,WAEzB,IAECV,IAAcxB,EAAW8B,QAAgB,KAE3C,yBAAKK,UAAU,OACb,wDACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOhC,KAAK,SACTC,IAAKC,aAAe,kBAACK,EAAD,MAAW,kBAAC,IAAD,CAAU0B,GAAG,YAE/C,kBAAC,IAAD,CAAOjC,KAAK,UACV,kBAACF,EAAD,OAEF,kBAAC,IAAD,CAAOE,KAAK,KACV,kBAAC,IAAD,CAAUiC,GAAG,eEvCzBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.075f50ae.chunk.js","sourcesContent":["export enum LiffStatus {\n  Success = \"success\",\n  Failed = \"failed\",\n  Initializing = \"initializing\",\n}\n","import React from \"react\";\nimport liff from \"@line/liff\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nconst isDev =\n  process.env.NODE_ENV === \"development\" ||\n  process.env.REACT_APP_ENVIRONMENT === \"local\";\n\nexport default function LoginPage() {\n  const handleLogin = () => {\n    if (!liff.isLoggedIn()) {\n      return isDev\n        ? liff.login({ redirectUri: process.env.REACT_APP_REDIRECT_URL })\n        : liff.login();\n    }\n  };\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/login\">\n          {liff.isLoggedIn() ? (\n            <div>Login success</div>\n          ) : (\n            <div>\n              Not login yet\n              <div>\n                <button onClick={handleLogin}>LoginPage</button>\n              </div>\n            </div>\n          )}\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n","import React from \"react\";\nimport liff from \"@line/liff\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function Home() {\n  const history = useHistory();\n\n  return (\n    <>\n      <div>Welcome!</div>\n      <div>\n        <button\n          onClick={() => {\n            liff.logout();\n            history.push(\"/login\");\n          }}\n        >\n          LOGOUT\n        </button>\n      </div>\n      <div style={{ marginTop: \"20px\" }}>\n        <div>OS: {liff.getOS()}</div>\n        <div>Language: {liff.getLanguage()}</div>\n        <div>SDK version: {liff.getVersion()}</div>\n        <div>\n          {`LINE version: ${\n            liff.getLineVersion()\n              ? liff.getLineVersion()\n              : \"not in LINE platform\"\n          }`}\n        </div>\n      </div>\n    </>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\nimport { LIFF_ID } from \"@src/common/appConfig\";\nimport liff from \"@line/liff\";\nimport { LiffStatus } from \"./constants\";\nimport LoginPage from \"@src/components/LoginPage\";\nimport Home from \"@src/components/Home\";\n\nfunction App() {\n  const [liffState, setLiffState] = useState<LiffStatus>(\n    LiffStatus.Initializing\n  );\n\n  useEffect(() => {\n    try {\n      liff.init({ liffId: LIFF_ID }).then(() => {\n        setLiffState(LiffStatus.Success);\n      });\n      console.log(\"liff success init\");\n    } catch (err) {\n      console.log(err);\n      setLiffState(LiffStatus.Failed);\n    }\n  }, []);\n\n  if (liffState !== LiffStatus.Success) return null;\n  return (\n    <div className=\"App\">\n      <h2>ATL Drink Booking System</h2>\n      <Router>\n        <Switch>\n          <Route path=\"/home\">\n            {liff.isLoggedIn() ? <Home /> : <Redirect to=\"/login\" />}\n          </Route>\n          <Route path=\"/login\">\n            <LoginPage />\n          </Route>\n          <Route path=\"/\">\n            <Redirect to=\"/home\" />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","export const LIFF_ID = \"1654890601-XA14P1B4\";\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}